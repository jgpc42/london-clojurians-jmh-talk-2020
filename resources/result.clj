(ns result
  "Requires a data file generated by bench.clj."
  (:require [clojure.java.io :as io]
            [clojure.edn :as edn]
            [clojure.pprint :refer [pprint]])
  (:import [java.io PushbackReader StringReader]))

(defn -main [& [filename]]
  (let [file (-> (or filename "results.edn") io/file slurp)
        reader (PushbackReader. (StringReader. file))
        results (->> (repeat reader)
                     (map #(edn/read {:eof nil} %))
                     (take-while some?)
                     (mapcat concat)
                     (group-by (juxt :tag :run))
                     (sort-by (comp vec second key)))]
    (doseq [[kind dataset] results]
      (let [dataset (sort-by :score dataset)
            repr (:str (nth dataset 4))]
        (pprint {kind [repr (map :score dataset)]})))))
