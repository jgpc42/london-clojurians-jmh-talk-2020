






* States (continued)

** Another addition

file:src/demo/core.clj
#+BEGIN_SRC clojure
(let [inc-zero (fnil inc 0)]
  (defn reset-atom [a]
    (swap! a inc-zero)))
#+END_SRC

** Benchmark and state definitions

file:./04-state-scope.edn
#+BEGIN_SRC clojure
{:benchmarks
 [{:name :contended, :fn demo.core/reset-atom, :args [:state/global]}
  {:name :uncontended, :fn demo.core/reset-atom, :args [:state/local]}]

 :states
 {:global {:fn (partial atom nil), :scope :benchmark}
  :local {:fn (partial atom nil), :scope :thread}}}
#+END_SRC

- Giving a benchmark a :name helps differentiate when 
  benchmarking the same fn.

** Run

$ lein jmh '{:file "./04-state-scope.edn", :fork 1, :format :table
             :threads 4, :mode :average, :only [:name :score]}'

** Results

:name         :score      
------------  ------------
:contended    ≈ 10⁻⁶  s/op
:uncontended  ≈ 10⁻⁷  s/op

- Around an order of magnitude faster for uncontended atom (with 4 threads).
- Now JMH is utilizing each of my cores each iteration.

