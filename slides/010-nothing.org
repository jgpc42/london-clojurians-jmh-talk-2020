






* Baseline

"There are no magical infrastructures which incur no overhead."

- For JMH: "generally, down to several cycles per function call."
- Our question: "what does this mean in terms of results?"

** Namespace

file:src/demo/core.clj
#+BEGIN_SRC clojure
(defn do-nothing [])
#+END_SRC

** First benchmark file

file:./01-baseline.edn
#+BEGIN_SRC clojure
{:benchmarks [demo.core/do-nothing]}
#+END_SRC

** Run

$ lein jmh '{:file "./01-baseline.edn", :fork 1, :only [:score]}'

- We tell lein-jmh what result keys we're interested in.
- JMH defaults to 5 forks (aggregated full runs).
- Throughput mode measures operations (fn calls) per second (configurable).

** Very exiting result

{:score [2.3760000358161172E8 "ops/s"]}

- ~237m invocations per second.

** Comparison with trivial operation

file:src/demo/core.clj
#+BEGIN_SRC clojure
(defn add ^long [^long a ^long b]
  (unchecked-add a b))
#+END_SRC

$ lein jmh '{:file "./01-baseline.edn", :fork 1, :only [:score] :select :add}'

*** Result

{:score [2.4692483736733046E8 "ops/s"]}

- ~246m invocations per second.
- ~9m more measured operations?
- Equivalent (slightly faster) to doing nothing? 

** Pitfalls

file:src/demo/core.clj
#+BEGIN_SRC clojure
(defn return-zero ^long []
  (unchecked-long 0))
#+END_SRC

$ lein jmh '{:file "./01-baseline.edn", :fork 1, :only [:score] :select :zero}'

{:score [3.2692681831127346E8 "ops/s"]}

- ~326m operations per second.
- That's more like it: a lot more than our addition case.
- We've effectively measured nothing?

** Blackholes, not pitfalls

file:./01-baseline.edn
#+BEGIN_SRC clojure
{:benchmarks [{:fn demo.core/do-nothing, :void true}]}
#+END_SRC

$ lein jmh '{:file "./01-baseline.edn", :fork 1, :only [:score]}'

*** Result

{:score [1.5454736475951314E9 "ops/s"]}

- Now we truely are doing "nothing".
- ~1.5b (billion) "operations" per second.
- This sub-nanosecond result is not real - at least on commodity 
  machines. If curious, see the Gil Tene talk for more.

*** Example function 

#+BEGIN_SRC clojure
(defn doing-less-than-you-think []
  (some-expensive-computation) ;; can be elided
  (cheap-unrelated-result))
#+END_SRC

*** Wisdom from JMH

"... To gain reusable insights, you need to follow up on
why the numbers are the way they are."

"... Do not assume the numbers tell you what you want them to tell."
